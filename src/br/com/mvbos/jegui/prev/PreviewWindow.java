/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.mvbos.jegui.prev;

import br.com.mvbos.jeg.element.ElementModel;
import br.com.mvbos.jeg.element.ElementMovableModel;
import br.com.mvbos.jeg.element.IButtonElement;
import br.com.mvbos.jeg.scene.Click;
import br.com.mvbos.jeg.scene.IScene;
import br.com.mvbos.jeg.window.IMemory;
import br.com.mvbos.jeg.window.impl.MemoryImpl;
import br.com.mvbos.jegui.Constants;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.Map;
import javax.swing.JPanel;

/**
 *
 * @author Marcus Becker
 */
public class PreviewWindow extends javax.swing.JFrame {

    private final IMemory[] memo = new IMemory[3];

    private final IScene scene;
    private final BufferedImage buf;
    private final Dimension dim;

    public PreviewWindow(Map<String, List<ElementModel>> lst, Dimension dim) {

        this.dim = dim;

        memo[0] = new MemoryImpl(lst.get(Constants.BACKGROUND).size());
        memo[1] = new MemoryImpl(lst.get(Constants.STAGE).size());
        memo[2] = new MemoryImpl(lst.get(Constants.FOREGROUND).size());

        for (ElementModel e : lst.get(Constants.BACKGROUND)) {
            memo[0].registerElement(e);
        }

        for (ElementModel e : lst.get(Constants.STAGE)) {
            memo[1].registerElement(e);
        }

        for (ElementModel e : lst.get(Constants.FOREGROUND)) {
            memo[2].registerElement(e);
        }

        buf = new BufferedImage(dim.width, dim.height, BufferedImage.TYPE_INT_RGB);

        scene = createScene();

        initComponents();

        pack();
        
        initGame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas = createCanvas();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 587, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 368, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel canvas;
    // End of variables declaration//GEN-END:variables

    private JPanel createCanvas() {
        return new JPanel() {

            @Override
            protected void paintComponent(Graphics g) {
                g.drawImage(buf, 0, 0, null);
            }

            @Override
            public Dimension getPreferredSize() {
                return dim;
            }

        };
    }
    private static int i;

    private IScene createScene() {
        return new IScene() {

            @Override
            public void update() {
                for (IMemory m : memo) {
                    for (i = 0; i < m.getElementCount(); i++) {
                        m.getByElement(i).update();
                    }
                }
            }

            @Override
            public void drawElements(Graphics2D g2d) {
                for (IMemory m : memo) {
                    for (i = 0; i < m.getElementCount(); i++) {
                        m.getByElement(i).drawMe(g2d);
                    }
                }
            }

            @Override
            public void changeSceneEvent() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void selectElement(ElementModel e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void focusElement(ElementModel e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void releaseElement(ElementModel element, ElementModel anotherElement) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void closeWindow() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public boolean startScene() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public IMemory getElements() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void clickElement(int clickCount) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void clickElement(Click m) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void selectElement(ElementModel[] arr) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseMove(ElementModel e, Click m) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyEvent(char keyChar, int keyCode) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyRelease(char keyChar, int keyCode) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void setTitle(String title) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public String getTitle() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void releaseElement(ElementModel element) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void clickButton(IButtonElement button) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void moveElement(ElementMovableModel selectedMovableElement) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void reflashElementPosition(ElementMovableModel e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void startGame() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public Color getBgColor() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void resizeWindow() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };
    }

    private void initGame() {
        new Thread() {

            @Override
            public void run() {
                long prxAtualizacao = 0;

                while (true) {
                    if (System.currentTimeMillis() > prxAtualizacao) {
                        scene.update();
                        scene.drawElements(buf.createGraphics());

                        canvas.repaint();

                        prxAtualizacao = System.currentTimeMillis() + 50;
                    }
                }
            }

        }.start();

    }
}
